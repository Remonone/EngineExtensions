name: upm-auto-release

on:
  push:
    branches: [ main ]

permissions:
  contents: write

concurrency:
  group: upm-auto-release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup git identity
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Debug changed files (optional)
        run: |
          echo "Diff base: ${{ github.event.before }}"
          echo "Diff head: ${{ github.sha }}"
          git diff --name-status "${{ github.event.before }}" "${{ github.sha }}" || true

            - name: Detect packages to release (changed + initial)
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          ROOT="Assets/Packages"

          # 1) package.json, изменённые в этом пуше
          CHANGED_PKG_JSON=$(git diff --name-only "${{ github.event.before }}" "${{ github.sha }}" -- "${ROOT}/*/package.json" || true)
          declare -A WANT=()
          if [[ -n "$CHANGED_PKG_JSON" ]]; then
            while IFS= read -r p; do
              pkg=$(awk -F/ '{print $3}' <<<"$p")
              [[ -n "$pkg" ]] && WANT["$pkg"]=1
            done <<< "$CHANGED_PKG_JSON"
          fi

          # 2) Инициальный релиз: пакеты без тега <pkg>@<version>
          while IFS= read -r pj; do
            pkg=$(awk -F/ '{print $3}' <<<"$pj")
            ver=$(jq -r '.version' "$pj")
            tag="$pkg@$ver"
            if ! git rev-parse -q --verify "refs/tags/$tag" >/dev/null; then
              WANT["$pkg"]=1
            fi
          done < <(ls -1 "${ROOT}"/*/package.json 2>/dev/null || true)

          # Сформировать compact JSON-массив (одной строкой!)
          if (( ${#WANT[@]} == 0 )); then
            echo "release_pkgs=" >> "$GITHUB_OUTPUT"
            echo "No packages to release."
            exit 0
          fi

          # compact (-c) чтобы не было переводов строк
          PKGS_JSON=$(printf '%s\n' "${!WANT[@]}" | sort -u | jq -R . | jq -sc .)
          echo "Will release packages: $PKGS_JSON"
          echo "release_pkgs=$PKGS_JSON" >> "$GITHUB_OUTPUT"

      - name: Auto release
        if: steps.detect.outputs.release_pkgs != ''
        shell: bash
        run: |
          set -euo pipefail
          ROOT="Assets/Packages"

          pkgs='${{ steps.detect.outputs.release_pkgs }}'   # JSON строкой
          # Обходим массив пакетов
          while IFS= read -r PKG; do
            PREFIX="$ROOT/$PKG"
            PJ="$PREFIX/package.json"
            [[ -f "$PJ" ]] || { echo "Skip $PKG: no $PJ"; continue; }

            VER=$(jq -r '.version' "$PJ")
            TAG="$PKG@$VER"
            echo "=== Releasing $PKG version $VER (tag $TAG)"

            COMMIT=$(git subtree split --prefix="$PREFIX" "${{ github.sha }}")
            echo "Split commit: $COMMIT"

            BR="upm/$PKG"
            git branch -f "$BR" "$COMMIT"
            git push -f origin "$BR"

            if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
              echo "Tag $TAG already exists — skip tagging."
            else
              git tag -a "$TAG" "$COMMIT" -m "$TAG"
              git push origin "$TAG"
              echo "Published tag $TAG"
            fi
          done < <(jq -r '.[]' <<<"$pkgs")

